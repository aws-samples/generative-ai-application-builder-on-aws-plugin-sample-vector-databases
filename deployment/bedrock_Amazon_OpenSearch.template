{
  "Description": "(SO0276-BedrockChat) - generative-ai-application-builder-on-aws - BedrockChat - Version v1.2.3",
 "Parameters": {
    "UseCaseUUID": {
      "Type": "String",
      "AllowedPattern": "^[0-9a-fA-F]{8}$",
      "ConstraintDescription": "Please provide an 8 character long UUID",
      "Description": "UUID to identify this deployed use case within an application. Please provide an 8 character long UUID. If you are editing the stack, do not modify the value (retain the value used during creating the stack). A different UUID when editing the stack will result in new AWS resource created and deleting the old ones",
      "Default": 87654321,
      "MaxLength": 8
    },
    "OpenSearchSearchMethod": {
      "Type": "String",
      "Description": "Choose to search by text or embeddings",
      "AllowedValues": [
        "text",
        "embeddings"
      ],
      "Default": "text"
    },
    
    "OpenSearchChatLambdaBucket": {
      "Type": "String",
      "Description": "Name of the s3 bucket where the lambda function is uploaded."
    },
     "ExistingOpenSearchIndexId": {
      "Type": "String",
      "Default": "llm_apps_workshop_embeddings",
      
      "Description": "Index ID of an existing OpenSearch to be used for the use case."
    },
    "ExistingOpenSearchHost": {
      "Type": "String",
      "Default": "search-opensearchservi-******-******.us-east-1.es.amazonaws.com",
      "Description": "Host name- starts with 'search' "
    },
     "DefaultOpenSearchNumberOfDocs": {
      "Type": "Number",
      "Default": 10,
      
      "Description": "Default number of docs"
      
    },
     "OpenSearchPort": {
      "Type": "Number",
      "Default": 443,
      
      "Description": "Default number of docs"
      
    },
    "OpenSearchSecret": {
      "Type": "String",
      "Default": "OpenSearchSecret-rag22",
      "Description": "Secret Name. This name starts with 'OpenSearchSecret' and joins the name of the cloudformation stack with a '-' "
    },
    "ExistingKendraIndexId": {
      "Type": "String",
      "Default": "",
      "AllowedPattern": "^$|^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
      "Description": "Index ID of an existing kendra index to be used for the use case. If none is provided, a new index will be created for you."
    },
    "NewKendraIndexName": {
      "Type": "String",
      "Default": "GAABKnowledgeBaseIndex",
      "AllowedPattern": "^$|^[0-9a-zA-Z-]{1,64}$",
      "Description": "Name for the new kendra index to be created for this use case. Only applies if existingKendraIndexId is not supplied.",
      "MaxLength": 64
    },
    "NewKendraQueryCapacityUnits": {
      "Type": "Number",
      "Default": 0,
      "ConstraintDescription": "Please provide a number between 0 and 1",
      "Description": "Additional query capacity units for the new kendra index to be created for this use case. Only applies if existingKendraIndexId is not supplied. See: https://docs.aws.amazon.com/kendra/latest/APIReference/API_CapacityUnitsConfiguration.html",
      "MaxValue": 1,
      "MinValue": 0
    },
    "NewKendraStorageCapacityUnits": {
      "Type": "Number",
      "Default": 0,
      "ConstraintDescription": "Please provide a number between 0 and 5",
      "Description": "Additional storage capacity units for the new kendra index to be created for this use case. Only applies if existingKendraIndexId is not supplied. See: https://docs.aws.amazon.com/kendra/latest/APIReference/API_CapacityUnitsConfiguration.html",
      "MaxValue": 5,
      "MinValue": 0
    },
    "NewKendraIndexEdition": {
      "Type": "String",
      "Default": "DEVELOPER_EDITION",
      "AllowedValues": [
        "DEVELOPER_EDITION",
        "ENTERPRISE_EDITION"
      ],
      "Description": "The edition of kendra to use for the new kendra index to be created for this use case. Only applies if existingKendraIndexId is not supplied. See: https://docs.aws.amazon.com/kendra/latest/dg/kendra-editions.html"
    },
    "ChatConfigSSMParameterName": {
      "Type": "String",
      "Default":"/gaab-ai/use-case-config/87654321",
      "AllowedPattern": "^(\\/[^\\/ ]*)+\\/?$",
      "Description": "Name of the SSM parameter containing configurations required by the chat provider lambda at runtime. Parameter value is expected to be a JSON string. The SSM parameter will be populated by the deployment platform if in use. For standalone deployments of this use-case, manual configuration is required using publish.sh script.",
      "MaxLength": 63
    },
    "DefaultUserEmail": {
      "Type": "String",
      "Default": "placeholder@example.com",
      "AllowedPattern": "^$|[A-Za-z0-9_!#$%&'*+/=?`{|}~^.-]+@[A-Za-z0-9.-]+$",
      "ConstraintDescription": "Please provide a valid email",
      "Description": "Email of the default user for this use case. A cognito user for this email will be created to access the use case."
    },
    "ExistingCognitoUserPoolId": {
      "Type": "String",
      "Default": "",
      "AllowedPattern": "^$|^[0-9a-zA-Z_-]{9,24}$",
      "Description": "UserPoolId of an existing cognito user pool which this use case will be authenticated with. Typically will be provided when deploying from the deployment platform, but can be omitted when deploying this use-case stack standalone.",
      "MaxLength": 24
    },
    "ExistingCognitoGroupPolicyTableName": {
      "Type": "String",
      "Default": "",
      "AllowedPattern": "^$|^[a-zA-Z0-9_.-]{3,255}$",
      "Description": "Name of the DynamoDB table containing user group policies, used by the custom authorizer on this use-cases API. Typically will be provided when deploying from the deployment platform, but can be omitted when deploying this use-case stack standalone.",
      "MaxLength": 255
    },
    "RAGEnabled": {
      "Type": "String",
      "Default": "true",
      "AllowedValues": [
        "true",
        "false"
      ],
      "Description": "If set to \"true\", the deployed use case stack will use the provided/created kendra, amazon opensearch index to provide RAG functionality. If set to false, the user interacts directly with the LLM."
    },
    "DeployUI": {
      "Type": "String",
      "Default": "Yes",
      "AllowedValues": [
        "Yes",
        "No"
      ],
      "Description": "Please select the option to deploy the front end UI for this deployment"
    },
     "ExistingSagemakerEmbeddingENDPOINT": {
      "Type": "String",
      "Default": "llm-apps-blog-gpt-j-6b-endpoint",
      "Description": "The endpoint name provisioned by the previous stack. example, llm-apps-blog-gpt-j-6b-endpoint"
    }
  },
  "Rules": {
    "PolicyTableRequiredRule": {
      "RuleCondition": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              {
                "Ref": "ExistingCognitoUserPoolId"
              },
              ""
            ]
          }
        ]
      },
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Equals": [
                  {
                    "Ref": "ExistingCognitoGroupPolicyTableName"
                  },
                  ""
                ]
              }
            ]
          },
          "AssertDescription": "When providing an ExistingCognitoUserPoolId ExistingCognitoGroupPolicyTableName must also be provided."
        }
      ]
    },
    "ExistingUserPoolRequiredRule": {
      "RuleCondition": {
        "Fn::Not": [
          {
            "Fn::Equals": [
              {
                "Ref": "ExistingCognitoGroupPolicyTableName"
              },
              ""
            ]
          }
        ]
      },
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Equals": [
                  {
                    "Ref": "ExistingCognitoUserPoolId"
                  },
                  ""
                ]
              }
            ]
          },
          "AssertDescription": "When providing an ExistingCognitoGroupPolicyTableName ExistingCognitoUserPoolId must also be provided."
        }
      ]
    },
    "NoKendraWithoutRagRule": {
      "RuleCondition": {
        "Fn::Equals": [
          {
            "Ref": "RAGEnabled"
          },
          "false"
        ]
      },
      "Assertions": [
        {
          "Assert": {
            "Fn::And": [
              {
                "Fn::Equals": [
                  {
                    "Ref": "ExistingKendraIndexId"
                  },
                  ""
                ]
              },
              {
                "Fn::Equals": [
                  {
                    "Ref": "NewKendraIndexName"
                  },
                  "GAABKnowledgeBaseIndex"
                ]
              },
              {
                "Fn::Equals": [
                  {
                    "Ref": "NewKendraQueryCapacityUnits"
                  },
                  "0"
                ]
              },
              {
                "Fn::Equals": [
                  {
                    "Ref": "NewKendraStorageCapacityUnits"
                  },
                  "0"
                ]
              },
              {
                "Fn::Equals": [
                  {
                    "Ref": "NewKendraIndexEdition"
                  },
                  "DEVELOPER_EDITION"
                ]
              }
            ]
          },
          "AssertDescription": "If RAG is not enabled, no Kendra resources can be referenced or created."
        }
      ]
    }
  },
  "Mappings": {
      "S3Keys": {
      "text": {"S3Key": "ChatLlmProviderLambdaAmazonOpenSearchText.zip"},
      "embeddings": {"S3Key": "ChatLlmProviderLambdaAmazonOpenSearchEmbeddings.zip"}
    },
    "Solution": {
      "Data": {
        "SendAnonymousUsageData": "Yes",
        "ID": "SO0276",
        "Version": "v1.2.3",
        "SolutionName": "generative-ai-application-builder-on-aws",
        "UseCaseName": "chat"
      }
    },
    "FeaturesToDeploy": {
      "Deploy": {
        "CustomDashboard": "Yes"
      }
    },
    "SourceCode": {
      "General": {
        "S3Bucket": "solutions",
        "KeyPrefix": "generative-ai-application-builder-on-aws/v1.2.3",
        "SolNamePrefix": "generative-ai-application-builder-on-aws"
      }
    }
  },
  "Conditions": {
    "RAGEnabledCondition": {
      "Fn::Equals": [
        {
          "Ref": "RAGEnabled"
        },
        "true"
      ]
    },
    "DeployKendraIndexCondition": {
      "Fn::And": [
        {
          "Fn::Equals": [
            {
              "Ref": "ExistingKendraIndexId"
            },
            ""
          ]
        },
        {
          "Condition": "RAGEnabledCondition"
        }
      ]
    },
    "IsInternalUserCondition": {
      "Fn::Equals": [
        {
          "Fn::Select": [
            0,
            {
              "Fn::Split": [
                ".",
                {
                  "Fn::Select": [
                    1,
                    {
                      "Fn::Split": [
                        "@",
                        {
                          "Ref": "DefaultUserEmail"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        "amazon"
      ]
    },
    "AnonymousDataAWSCondition": {
      "Fn::Equals": [
        {
          "Fn::FindInMap": [
            "Solution",
            "Data",
            "SendAnonymousUsageData"
          ]
        },
        "Yes"
      ]
    },
    "WebsocketRequestProcessorUseCaseCognitoSetupCreateUserPoolCondition0A9C42F0": {
      "Fn::Or": [
        {
          "Fn::Equals": [
            {
              "Ref": "ExistingCognitoUserPoolId"
            },
            ""
          ]
        },
        {
          "Fn::Equals": [
            {
              "Ref": "ExistingCognitoGroupPolicyTableName"
            },
            ""
          ]
        }
      ]
    },
    "WebsocketRequestProcessorUseCaseCognitoSetupCognitoUserCondition3A29510D": {
      "Fn::Not": [
        {
          "Fn::Or": [
            {
              "Fn::Equals": [
                {
                  "Ref": "DefaultUserEmail"
                },
                "placeholder@example.com"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "DefaultUserEmail"
                },
                ""
              ]
            }
          ]
        }
      ]
    },
    "DeployCustomDashboard": {
      "Fn::Equals": [
        {
          "Fn::FindInMap": [
            "FeaturesToDeploy",
            "Deploy",
            "CustomDashboard"
          ]
        },
        "Yes"
      ]
    },
    "DeployWebApp": {
      "Fn::Equals": [
        {
          "Ref": "DeployUI"
        },
        "Yes"
      ]
    },
    "CDKMetadataAvailable": {
      "Fn::Or": [
        {
          "Fn::Or": [
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "af-south-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-east-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-northeast-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-northeast-2"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-south-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-southeast-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-southeast-2"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ca-central-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "cn-north-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "cn-northwest-1"
              ]
            }
          ]
        },
        {
          "Fn::Or": [
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-central-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-north-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-south-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-west-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-west-2"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-west-3"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "me-south-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "sa-east-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "us-east-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "us-east-2"
              ]
            }
          ]
        },
        {
          "Fn::Or": [
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "us-west-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "us-west-2"
              ]
            }
          ]
        }
      ]
    }
  },
  "Resources": {
    "UseCaseSetupAccessLog473E9BB9": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true
        }
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "reason": "This S3 bucket is used as the access logging bucket for another bucket",
              "id": "AwsSolutions-S1"
            }
          ]
        }
      }
    },
    "UseCaseSetupAccessLogPolicyFE09248E": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "UseCaseSetupAccessLog473E9BB9"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false"
                }
              },
              "Effect": "Deny",
              "Principal": {
                "AWS": "*"
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "UseCaseSetupAccessLog473E9BB9",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "UseCaseSetupAccessLog473E9BB9",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        }
      }
    },
    "UseCaseSetupInfraSetupCustomResource435712F7": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "solutions-${AWS::Region}"
          },
          "S3Key": "generative-ai-application-builder-on-aws/v1.2.3/assetf4c6fddc974006ae8c34168bdbfc05bb8d204a6d8bd2f9f9fcd14caad0db5162.zip"
        },
        "Description": "A custom resource lambda function to perform operations based on operation type",
        "Environment": {
          "Variables": {
            "POWERTOOLS_SERVICE_NAME": "CUSTOM-RESOURCE",
            "LOG_LEVEL": "DEBUG",
            "AWS_SDK_USER_AGENT": "{ \"user_agent_extra\": \"AwsSolution/SO0276/v1.2.3\" }"
          }
        },
        "Handler": "lambda_func.handler",
        "Layers": [
          {
            "Ref": "PythonUserAgentLayer6958F3C0"
          },
          {
            "Ref": "Boto3Layer463A0AEA"
          }
        ],
        "Role": {
          "Fn::GetAtt": [
            "UseCaseSetupCustomResourceLambdaRole043CC005",
            "Arn"
          ]
        },
        "Runtime": "python3.11",
        "Timeout": 900,
        "TracingConfig": {
          "Mode": "Active"
        }
      },
      "DependsOn": [
        "UseCaseSetupCustomResourceLambdaRoleDefaultPolicy041F2670",
        "UseCaseSetupCustomResourceLambdaRole043CC005"
      ],
      "Metadata": {
        "aws:asset:path": "asset.f4c6fddc974006ae8c34168bdbfc05bb8d204a6d8bd2f9f9fcd14caad0db5162",
        "aws:asset:is-bundled": true,
        "aws:asset:property": "Code"
      }
    },
    "UseCaseSetupInfraSetupScheduledAnonymousMetrics58212AB7": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "solutions-${AWS::Region}"
          },
          "S3Key": "generative-ai-application-builder-on-aws/v1.2.3/assetf4c6fddc974006ae8c34168bdbfc05bb8d204a6d8bd2f9f9fcd14caad0db5162.zip"
        },
        "Description": "A lambda function that runs as per defined schedule to publish metrics",
        "Environment": {
          "Variables": {
            "POWERTOOLS_SERVICE_NAME": "ANONYMOUS-CW-METRICS",
            "LOG_LEVEL": "DEBUG",
            "SOLUTION_ID": "SO0276",
            "SOLUTION_VERSION": "v1.2.3",
            "USE_CASE_UUID_ENV_VAR": {
              "Ref": "UseCaseUUID"
            },
            "KENDRA_INDEX_ID": {
              "Fn::If": [
                "DeployKendraIndexCondition",
                {
                  "Fn::GetAtt": [
                    "KnowledgeBaseSetupKendraKnowledgeBaseNestedStackKendraKnowledgeBaseNestedStackResource1A6F8AB9",
                    "Outputs.BedrockChatKnowledgeBaseSetupKendraKnowledgeBase4B1DFC9FId"
                  ]
                },
                {
                  "Ref": "ExistingKendraIndexId"
                }
              ]
            },
            "WEBSOCKET_API_ID": {
              "Ref": "WebsocketRequestProcessorWebSocketEndpointChatAPIBD50D997"
            },
            "USER_POOL_ID": {
              "Fn::If": [
                "WebsocketRequestProcessorUseCaseCognitoSetupCreateUserPoolCondition0A9C42F0",
                {
                  "Ref": "WebsocketRequestProcessorUseCaseCognitoSetupNewUserPool942F8271"
                },
                {
                  "Ref": "ExistingCognitoUserPoolId"
                }
              ]
            },
            "CLIENT_ID": {
              "Ref": "WebsocketRequestProcessorUseCaseCognitoSetupAppClientF1D50F74"
            },
            "USE_CASE_UUID": {
              "Ref": "UseCaseUUID"
            },
            "AWS_SDK_USER_AGENT": "{ \"user_agent_extra\": \"AwsSolution/SO0276/v1.2.3\" }"
          }
        },
        "Handler": "lambda_ops_metrics.handler",
        "Layers": [
          {
            "Ref": "PythonUserAgentLayer6958F3C0"
          },
          {
            "Ref": "Boto3Layer463A0AEA"
          }
        ],
        "Role": {
          "Fn::GetAtt": [
            "UseCaseSetupScheduledMetricsLambdaRole094F4C6B",
            "Arn"
          ]
        },
        "Runtime": "python3.11",
        "Timeout": 900,
        "TracingConfig": {
          "Mode": "Active"
        }
      },
      "DependsOn": [
        "UseCaseSetupScheduledMetricsLambdaRoleDefaultPolicyAAB1CACA",
        "UseCaseSetupScheduledMetricsLambdaRole094F4C6B"
      ],
      "Metadata": {
        "aws:asset:path": "asset.f4c6fddc974006ae8c34168bdbfc05bb8d204a6d8bd2f9f9fcd14caad0db5162",
        "aws:asset:is-bundled": true,
        "aws:asset:property": "Code"
      },
      "Condition": "AnonymousDataAWSCondition"
    },
    "UseCaseSetupInfraSetupGetMetricsDataPolicy90263388": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "cloudwatch:GetMetricData",
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "UseCaseSetupInfraSetupGetMetricsDataPolicy90263388",
        "Roles": [
          {
            "Ref": "UseCaseSetupScheduledMetricsLambdaRole094F4C6B"
          }
        ]
      },
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "reason": "Lambda requires this permission to read metrics from CloudWatch logs",
              "id": "AwsSolutions-IAM5"
            }
          ]
        }
      }
    },
    "UseCaseSetupInfraSetupMetricsPublishFrequency6D802B90": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "rate(1 hour)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "UseCaseSetupInfraSetupScheduledAnonymousMetrics58212AB7",
                "Arn"
              ]
            },
            "Id": "Target0"
          }
        ]
      },
      "Condition": "AnonymousDataAWSCondition"
    },
    "UseCaseSetupInfraSetupMetricsPublishFrequencyAllowEventRuleBedrockChatUseCaseSetupInfraSetupScheduledAnonymousMetrics06D14291939B33E7": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "UseCaseSetupInfraSetupScheduledAnonymousMetrics58212AB7",
            "Arn"
          ]
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "UseCaseSetupInfraSetupMetricsPublishFrequency6D802B90",
            "Arn"
          ]
        }
      }
    },
    "UseCaseSetupCustomResourceLambdaRole043CC005": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream"
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":logs:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        ":log-group:/aws/lambda/*"
                      ]
                    ]
                  }
                },
                {
                  "Action": "logs:PutLogEvents",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":logs:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        ":log-group:/aws/lambda/*:log-stream:*"
                      ]
                    ]
                  }
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy"
          }
        ]
      },
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "reason": "Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with tighter permissions.",
              "id": "AwsSolutions-IAM5",
              "applies_to": [
                "Resource::arn:<AWS::Partition>:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/*"
              ]
            },
            {
              "reason": "Lambda function has the required permission to write CloudWatch Log streams. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with tighter permissions.",
              "id": "AwsSolutions-IAM5",
              "applies_to": [
                "Resource::arn:<AWS::Partition>:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/*:log-stream:*"
              ]
            }
          ]
        }
      }
    },
    "UseCaseSetupCustomResourceLambdaRoleDefaultPolicy041F2670": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "xray:PutTelemetryRecords",
                "xray:PutTraceSegments"
              ],
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:ConditionCheckItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
                "dynamodb:GetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:PutItem",
                "dynamodb:Query",
                "dynamodb:Scan",
                "dynamodb:UpdateItem"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":dynamodb:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":table/",
                      {
                        "Fn::If": [
                          "WebsocketRequestProcessorUseCaseCognitoSetupCreateUserPoolCondition0A9C42F0",
                          {
                            "Ref": "WebsocketRequestProcessorUseCaseCognitoSetupCognitoGroupPolicyStoreBFD927C3"
                          },
                          {
                            "Ref": "ExistingCognitoGroupPolicyTableName"
                          }
                        ]
                      }
                    ]
                  ]
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "UseCaseSetupCustomResourceLambdaRoleDefaultPolicy041F2670",
        "Roles": [
          {
            "Ref": "UseCaseSetupCustomResourceLambdaRole043CC005"
          }
        ]
      },
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "reason": "Lambda role policy is configured to read data from S3 bucket",
              "id": "AwsSolutions-IAM5",
              "applies_to": [
                "Action::s3:Abort*",
                "Action::s3:DeleteObject*",
                "Resource::<SetupAppConfig016B0097.Arn>/*"
              ]
            },
            {
              "reason": "The wildcard permission is required to publish events for x-ray insights",
              "id": "AwsSolutions-IAM5",
              "applies_to": [
                "Resource::*"
              ]
            }
          ]
        }
      }
    },
    "UseCaseSetupScheduledMetricsLambdaRole094F4C6B": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream"
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":logs:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        ":log-group:/aws/lambda/*"
                      ]
                    ]
                  }
                },
                {
                  "Action": "logs:PutLogEvents",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":logs:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        ":log-group:/aws/lambda/*:log-stream:*"
                      ]
                    ]
                  }
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy"
          }
        ]
      },
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "reason": "Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with tighter permissions.",
              "id": "AwsSolutions-IAM5",
              "applies_to": [
                "Resource::arn:<AWS::Partition>:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/*"
              ]
            },
            {
              "reason": "Lambda function has the required permission to write CloudWatch Log streams. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with tighter permissions.",
              "id": "AwsSolutions-IAM5",
              "applies_to": [
                "Resource::arn:<AWS::Partition>:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/*:log-stream:*"
              ]
            },
            {
              "reason": "This policy allows get metric data from CloudWatch and has been specified per the AWS documentation.",
              "id": "AwsSolutions-IAM5",
              "applies_to": [
                "Resource::*"
              ]
            }
          ]
        }
      }
    },
    "UseCaseSetupScheduledMetricsLambdaRoleDefaultPolicyAAB1CACA": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "xray:PutTelemetryRecords",
                "xray:PutTraceSegments"
              ],
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "UseCaseSetupScheduledMetricsLambdaRoleDefaultPolicyAAB1CACA",
        "Roles": [
          {
            "Ref": "UseCaseSetupScheduledMetricsLambdaRole094F4C6B"
          }
        ]
      },
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "reason": "The wildcard permission is required to publish events for x-ray insights",
              "id": "AwsSolutions-IAM5",
              "applies_to": [
                "Resource::*"
              ]
            }
          ]
        }
      }
    },
    "UseCaseSetupWriteToSSM4B92778A": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ssm:DeleteParameter",
                "ssm:GetParameter",
                "ssm:PutParameter"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":ssm:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":parameter/gaab-webconfig/*"
                  ]
                ]
              }
            },
            {
              "Action": "ssm:GetParameter",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":ssm:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":parameter",
                    {
                      "Ref": "ChatConfigSSMParameterName"
                    }
                  ]
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "UseCaseSetupWriteToSSM4B92778A",
        "Roles": [
          {
            "Ref": "UseCaseSetupCustomResourceLambdaRole043CC005"
          }
        ]
      },
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "reason": "Permission is required to delete old webconfig ssm parameters",
              "id": "AwsSolutions-IAM5",
              "applies_to": [
                "Resource::arn:<AWS::Partition>:ssm:<AWS::Region>:<AWS::AccountId>:parameter/gaab-webconfig/*"
              ]
            }
          ]
        }
      }
    },
    "UseCaseSetupOpsCustomDashboard7C4D43EB": {
      "Type": "AWS::CloudWatch::Dashboard",
      "Properties": {
        "DashboardBody": {
          "Fn::Join": [
            "",
            [
              "{\"start\":\"start\",\"end\":\"end\",\"periodOverride\":\"auto\",\"widgets\":[{\"type\":\"metric\",\"width\":6,\"height\":6,\"x\":0,\"y\":0,\"properties\":{\"view\":\"timeSeries\",\"title\":\"Websocket Count Stats\",\"region\":\"",
              {
                "Ref": "AWS::Region"
              },
              "\",\"metrics\":[[\"AWS/ApiGateway\",\"ConnectCount\",\"ApiId\",\"",
              {
                "Ref": "WebsocketRequestProcessorWebSocketEndpointChatAPIBD50D997"
              },
              "\",{\"color\":\"#2ca02c\",\"label\":\"ConnectCount\",\"period\":3600,\"stat\":\"SampleCount\"}],[\"AWS/ApiGateway\",\"MessageCount\",\"ApiId\",\"",
              {
                "Ref": "WebsocketRequestProcessorWebSocketEndpointChatAPIBD50D997"
              },
              "\",{\"color\":\"#1f77b4\",\"label\":\"MessageCount\",\"period\":3600,\"stat\":\"SampleCount\"}],[\"AWS/ApiGateway\",\"ClientError\",\"ApiId\",\"",
              {
                "Ref": "WebsocketRequestProcessorWebSocketEndpointChatAPIBD50D997"
              },
              "\",{\"color\":\"#d62728\",\"label\":\"ClientError\",\"period\":3600,\"stat\":\"SampleCount\"}],[\"AWS/ApiGateway\",\"ExecutionError\",\"ApiId\",\"",
              {
                "Ref": "WebsocketRequestProcessorWebSocketEndpointChatAPIBD50D997"
              },
              "\",{\"color\":\"#ff7f0e\",\"label\":\"ExecutionError\",\"period\":3600,\"stat\":\"SampleCount\"}]],\"yAxis\":{}}},{\"type\":\"metric\",\"width\":6,\"height\":6,\"x\":6,\"y\":0,\"properties\":{\"view\":\"timeSeries\",\"title\":\"Websocket Connection Latency Stats\",\"region\":\"",
              {
                "Ref": "AWS::Region"
              },
              "\",\"metrics\":[[\"AWS/ApiGateway\",\"IntegrationLatency\",\"ApiId\",\"",
              {
                "Ref": "WebsocketRequestProcessorWebSocketEndpointChatAPIBD50D997"
              },
              "\",{\"color\":\"#ff7f0e\",\"label\":\"AverageIntegrationLatency\",\"period\":3600}],[\"AWS/ApiGateway\",\"IntegrationLatency\",\"ApiId\",\"",
              {
                "Ref": "WebsocketRequestProcessorWebSocketEndpointChatAPIBD50D997"
              },
              "\",{\"color\":\"#d62728\",\"label\":\"MaxIntegrationLatency\",\"period\":3600,\"stat\":\"Maximum\"}]],\"yAxis\":{}}},{\"type\":\"metric\",\"width\":6,\"height\":6,\"x\":12,\"y\":0,\"properties\":{\"view\":\"timeSeries\",\"title\":\"Cognito Sign-ins & Sign-ups\",\"region\":\"",
              {
                "Ref": "AWS::Region"
              },
              "\",\"metrics\":[[\"AWS/Cognito\",\"SignInSuccesses\",\"UserPool\",\"",
              {
                "Fn::If": [
                  "WebsocketRequestProcessorUseCaseCognitoSetupCreateUserPoolCondition0A9C42F0",
                  {
                    "Ref": "WebsocketRequestProcessorUseCaseCognitoSetupNewUserPool942F8271"
                  },
                  {
                    "Ref": "ExistingCognitoUserPoolId"
                  }
                ]
              },
              "\",\"UserPoolClient\",\"",
              {
                "Ref": "WebsocketRequestProcessorUseCaseCognitoSetupAppClientF1D50F74"
              },
              "\",{\"color\":\"#1f77b4\",\"label\":\"SignInSuccessesCount\",\"period\":3600,\"stat\":\"SampleCount\"}],[\"AWS/Cognito\",\"SignInSuccesses\",\"UserPool\",\"",
              {
                "Fn::If": [
                  "WebsocketRequestProcessorUseCaseCognitoSetupCreateUserPoolCondition0A9C42F0",
                  {
                    "Ref": "WebsocketRequestProcessorUseCaseCognitoSetupNewUserPool942F8271"
                  },
                  {
                    "Ref": "ExistingCognitoUserPoolId"
                  }
                ]
              },
              "\",\"UserPoolClient\",\"",
              {
                "Ref": "WebsocketRequestProcessorUseCaseCognitoSetupAppClientF1D50F74"
              },
              "\",{\"color\":\"#ff7f0e\",\"label\":\"AverageSignInSuccesses\",\"period\":3600}],[\"AWS/Cognito\",\"SignUpSuccesses\",\"UserPool\",\"",
              {
                "Fn::If": [
                  "WebsocketRequestProcessorUseCaseCognitoSetupCreateUserPoolCondition0A9C42F0",
                  {
                    "Ref": "WebsocketRequestProcessorUseCaseCognitoSetupNewUserPool942F8271"
                  },
                  {
                    "Ref": "ExistingCognitoUserPoolId"
                  }
                ]
              },
              "\",\"UserPoolClient\",\"Admin\",{\"color\":\"#7f7f7f\",\"label\":\"SignUpSuccessesCount\",\"period\":3600,\"stat\":\"SampleCount\"}],[\"AWS/Cognito\",\"SignUpSuccesses\",\"UserPool\",\"",
              {
                "Fn::If": [
                  "WebsocketRequestProcessorUseCaseCognitoSetupCreateUserPoolCondition0A9C42F0",
                  {
                    "Ref": "WebsocketRequestProcessorUseCaseCognitoSetupNewUserPool942F8271"
                  },
                  {
                    "Ref": "ExistingCognitoUserPoolId"
                  }
                ]
              },
              "\",\"UserPoolClient\",\"Admin\",{\"color\":\"#9467bd\",\"label\":\"AverageSignUpSuccesses\",\"period\":3600}]],\"yAxis\":{}}},{\"type\":\"metric\",\"width\":6,\"height\":6,\"x\":18,\"y\":0,\"properties\":{\"view\":\"timeSeries\",\"title\":\"LangChain Stats\",\"region\":\"",
              {
                "Ref": "AWS::Region"
              },
              "\",\"metrics\":[[\"Langchain/LLM\",\"LangchainQueries\",\"service\",\"GAABUseCase-",
              {
                "Ref": "UseCaseUUID"
              },
              "\",{\"color\":\"#1f77b4\",\"label\":\"LangchainQueriesCount\",\"period\":3600,\"stat\":\"SampleCount\"}],[\"Langchain/LLM\",\"LangchainFailures\",\"service\",\"GAABUseCase-",
              {
                "Ref": "UseCaseUUID"
              },
              "\",{\"color\":\"#d62728\",\"label\":\"LangchainFailuresCount\",\"period\":3600,\"stat\":\"SampleCount\"}],[\"Langchain/LLM\",\"IncorrectInputFailures\",\"service\",\"GAABUseCase-",
              {
                "Ref": "UseCaseUUID"
              },
              "\",{\"color\":\"#8c564b\",\"label\":\"IncorrectInputFailuresCount\",\"period\":3600,\"stat\":\"SampleCount\"}]],\"yAxis\":{}}},{\"type\":\"metric\",\"width\":6,\"height\":6,\"x\":0,\"y\":6,\"properties\":{\"view\":\"timeSeries\",\"title\":\"LangChain LLM Query Processing Stats\",\"region\":\"",
              {
                "Ref": "AWS::Region"
              },
              "\",\"metrics\":[[\"Langchain/LLM\",\"LangchainQueryProcessingTime\",\"service\",\"GAABUseCase-",
              {
                "Ref": "UseCaseUUID"
              },
              "\",{\"color\":\"#1f77b4\",\"label\":\"LangchainQueryProcessingTime\",\"period\":3600,\"stat\":\"SampleCount\"}],[\"Langchain/LLM\",\"LangchainQueryProcessingTime\",\"service\",\"GAABUseCase-",
              {
                "Ref": "UseCaseUUID"
              },
              "\",{\"color\":\"#ff7f0e\",\"label\":\"AverageLangchainQueryProcessingTime\",\"period\":3600}]],\"yAxis\":{}}},{\"type\":\"metric\",\"width\":6,\"height\":6,\"x\":6,\"y\":6,\"properties\":{\"view\":\"timeSeries\",\"title\":\"Kendra Query Stats\",\"region\":\"",
              {
                "Ref": "AWS::Region"
              },
              "\",\"metrics\":[[\"AWS/Kendra\",\"KendraQueries\",\"service\",\"GAABUseCase-",
              {
                "Ref": "UseCaseUUID"
              },
              "\",{\"color\":\"#1f77b4\",\"label\":\"KendraQueriesCount\",\"period\":3600,\"stat\":\"SampleCount\"}],[\"AWS/Kendra\",\"KendraFetchedDocuments\",\"service\",\"GAABUseCase-",
              {
                "Ref": "UseCaseUUID"
              },
              "\",{\"color\":\"#ff7f0e\",\"label\":\"KendraFetchedDocumentsCount\",\"period\":3600,\"stat\":\"SampleCount\"}],[\"AWS/Kendra\",\"KendraNoHits\",\"service\",\"GAABUseCase-",
              {
                "Ref": "UseCaseUUID"
              },
              "\",{\"color\":\"#9467bd\",\"label\":\"KendraNoHitsCount\",\"period\":3600,\"stat\":\"SampleCount\"}],[\"AWS/Kendra\",\"KendraFailures\",\"service\",\"GAABUseCase-",
              {
                "Ref": "UseCaseUUID"
              },
              "\",{\"color\":\"#d62728\",\"label\":\"KendraFailuresCount\",\"period\":3600,\"stat\":\"SampleCount\"}]],\"yAxis\":{}}},{\"type\":\"metric\",\"width\":6,\"height\":6,\"x\":12,\"y\":6,\"properties\":{\"view\":\"timeSeries\",\"title\":\"Kendra Latency Stats\",\"region\":\"",
              {
                "Ref": "AWS::Region"
              },
              "\",\"metrics\":[[\"AWS/Kendra\",\"KendraProcessingTime\",\"service\",\"GAABUseCase-",
              {
                "Ref": "UseCaseUUID"
              },
              "\",{\"color\":\"#9467bd\",\"label\":\"KendraProcessingTime\",\"period\":3600,\"stat\":\"SampleCount\"}],[\"AWS/Kendra\",\"KendraProcessingTime\",\"service\",\"GAABUseCase-",
              {
                "Ref": "UseCaseUUID"
              },
              "\",{\"color\":\"#1f77b4\",\"label\":\"AverageKendraProcessingTime\",\"period\":3600}]],\"yAxis\":{}}}]}"
            ]
          ]
        },
        "DashboardName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-",
              {
                "Ref": "AWS::Region"
              },
              "-Dashboard"
            ]
          ]
        }
      },
      "DeletionPolicy": "Delete",
      "Condition": "DeployCustomDashboard"
    },
    "UseCaseSetupSolutionHelperAnonymousData27F89063": {
      "Type": "Custom::AnonymousData",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "UseCaseSetupInfraSetupCustomResource435712F7",
            "Arn"
          ]
        },
        "Resource": "ANONYMOUS_METRIC",
        "SolutionId": "SO0276",
        "Version": "v1.2.3",
        "NEW_KENDRA_INDEX_CREATED": {
          "Fn::If": [
            "DeployKendraIndexCondition",
            "Yes",
            "No"
          ]
        },
        "KENDRA_EDITION": {
          "Ref": "NewKendraIndexEdition"
        },
        "SSM_CONFIG_KEY": {
          "Ref": "ChatConfigSSMParameterName"
        },
        "UUID": {
          "Ref": "UseCaseUUID"
        }
      },
      "DependsOn": [
        "WebConfig"
      ],
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Condition": "AnonymousDataAWSCondition"
    },
    "KnowledgeBaseSetupKendraKnowledgeBaseNestedStackKendraKnowledgeBaseNestedStackResource1A6F8AB9": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "Parameters": {
          "UseCaseUUID": {
            "Ref": "UseCaseUUID"
          },
          "KendraIndexName": {
            "Ref": "NewKendraIndexName"
          },
          "QueryCapacityUnits": {
            "Ref": "NewKendraQueryCapacityUnits"
          },
          "StorageCapacityUnits": {
            "Ref": "NewKendraStorageCapacityUnits"
          },
          "KendraIndexEdition": {
            "Ref": "NewKendraIndexEdition"
          },
          "referencetoBedrockChatRegistrySetup5B63CA30Id": {
            "Fn::GetAtt": [
              "RegistrySetupCC2515F0",
              "Id"
            ]
          }
        },
        "TemplateURL": {
          "Fn::Join": [
            "",
            [
              "https://solutions-reference.s3.",
              {
                "Ref": "AWS::URLSuffix"
              },
              "/",
              "generative-ai-application-builder-on-aws/v1.2.3/BedrockChatKnowledgeBaseSetupKendraKnowledgeBase9933D368.nested.template"
            ]
          ]
        }
      },
      "DependsOn": [
        "RegistrySetupCC2515F0"
      ],
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:asset:path": "BedrockChatKnowledgeBaseSetupKendraKnowledgeBase9933D368.nested.template.json",
        "aws:asset:property": "TemplateURL"
      },
      "Condition": "DeployKendraIndexCondition"
    },
    "ChatStorageSetupChatStorageNestedStackChatStorageNestedStackResource6A6EB7E4": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "Parameters": {
          "ConversationTableName": {
            "Fn::Join": [
              "",
              [
                "ConversationTable-",
                {
                  "Ref": "UseCaseUUID"
                }
              ]
            ]
          },
          "UseCaseUUID": {
            "Ref": "UseCaseUUID"
          },
          "referencetoBedrockChatRegistrySetup5B63CA30Id": {
            "Fn::GetAtt": [
              "RegistrySetupCC2515F0",
              "Id"
            ]
          }
        },
        "TemplateURL": {
          "Fn::Join": [
            "",
            [
              "https://solutions-reference.s3.",
              {
                "Ref": "AWS::URLSuffix"
              },
              "/",
              "generative-ai-application-builder-on-aws/v1.2.3/BedrockChatChatStorageSetupChatStorage190AB3EE.nested.template"
            ]
          ]
        }
      },
      "DependsOn": [
        "RegistrySetupCC2515F0"
      ],
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:asset:path": "BedrockChatChatStorageSetupChatStorage190AB3EE.nested.template.json",
        "aws:asset:property": "TemplateURL"
      }
    },
    "ChatLlmProviderLambdaRoleD54DE5CA": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream"
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":logs:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        ":log-group:/aws/lambda/*"
                      ]
                    ]
                  }
                },
                {
                  "Action": "logs:PutLogEvents",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":logs:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        ":log-group:/aws/lambda/*:log-stream:*"
                      ]
                    ]
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": "sagemaker:InvokeEndpoint",
                  "Resource": {
                    "Fn::Sub": "arn:aws:sagemaker:${AWS::Region}:${AWS::AccountId}:endpoint/*"
                  }
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy"
          }
        ]
      },
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "reason": "Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with tighter permissions.",
              "id": "AwsSolutions-IAM5",
              "applies_to": [
                "Resource::arn:<AWS::Partition>:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/*"
              ]
            },
            {
              "reason": "Lambda function has the required permission to write CloudWatch Log streams. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with tighter permissions.",
              "id": "AwsSolutions-IAM5",
              "applies_to": [
                "Resource::arn:<AWS::Partition>:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/*:log-stream:*"
              ]
            }
          ]
        }
      }
    },
    "ChatLlmProviderLambdaRoleDefaultPolicy7E57DE61": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "bedrock:InvokeModel",
                "bedrock:InvokeModelWithResponseStream"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":bedrock:",
                    {
                      "Ref": "AWS::Region"
                    },
                    "::foundation-model/*"
                  ]
                ]
              }
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:ConditionCheckItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
                "dynamodb:GetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:PutItem",
                "dynamodb:Query",
                "dynamodb:Scan",
                "dynamodb:UpdateItem"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "ChatStorageSetupChatStorageNestedStackChatStorageNestedStackResource6A6EB7E4",
                    "Outputs.BedrockChatChatStorageSetupChatStorageConversationTableB97E9ADAArn"
                  ]
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            {
              "Action": [
                "ssm:DescribeParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
                "ssm:GetParameters"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":ssm:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":parameter",
                    {
                      "Ref": "ChatConfigSSMParameterName"
                    }
                  ]
                ]
              }
            },
            {
              "Action": "execute-api:ManageConnections",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "WebsocketRequestProcessorWebSocketEndpointChatAPIBD50D997"
                    },
                    "/*/*/@connections/*"
                  ]
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "ChatLlmProviderLambdaRoleDefaultPolicy7E57DE61",
        "Roles": [
          {
            "Ref": "ChatLlmProviderLambdaRoleD54DE5CA"
          }
        ]
      },
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "reason": "This lambda is granted permissions to invoke any bedrock model, which requires the *.",
              "id": "AwsSolutions-IAM5",
              "applies_to": [
                "Resource::arn:<AWS::Partition>:bedrock:<AWS::Region>::foundation-model/*",
                "Resource::*"
              ]
            },
            {
              "reason": "Needed by websocket endpoints",
              "id": "AwsSolutions-IAM5",
              "applies_to": [
                "Resource::arn:<AWS::Partition>:execute-api:<AWS::Region>:<AWS::AccountId>:<WebsocketRequestProcessorWebSocketEndpointChatAPIBD50D997>/*/*/@connections/*"
              ]
            },
            {
              "reason": "This lambda requires permissions to send messages to the client connected to the websocket",
              "id": "AwsSolutions-IAM5",
              "applies_to": [
                "Resource::arn:<AWS::Partition>:execute-api:<AWS::Region>:<AWS::AccountId>:<WebsocketRequestProcessorWebSocketEndpointChatAPIAEE80909>/*/*/@connections/*"
              ]
            }
          ]
        }
      }
    },
    "LambdaSecretsManagerPolicy": {
    "Type": "AWS::IAM::Policy",
    "Properties": {
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "secretsmanager:GetSecretValue",
              "secretsmanager:DescribeSecret",
              "secretsmanager:ListSecrets"
            ],
            "Resource": {
              "Fn::Sub": "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${OpenSearchSecret}-*"
            }
          }
        ]
      },
      "PolicyName": "LambdaSecretsManagerPolicy",
      "Roles": [
        {
          "Ref": "ChatLlmProviderLambdaRoleD54DE5CA"
        }
      ]
    }
  },
    "ChatLlmProviderLambda8F111649": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {"Ref": "OpenSearchChatLambdaBucket"},
          "S3Key": {"Fn::FindInMap": ["S3Keys",{"Ref": "OpenSearchSearchMethod"},"S3Key"]}
        },
        "Description": "Lambda serving the websocket based API for Bedrock chat",
        "Environment": {
          "Variables": {
            "POWERTOOLS_SERVICE_NAME": "BEDROCK_CHAT",
            "RAG_ENABLED": {
              "Ref": "RAGEnabled"
            },
            
            "CONVERSATION_TABLE_NAME": {
              "Fn::GetAtt": [
                "ChatStorageSetupChatStorageNestedStackChatStorageNestedStackResource6A6EB7E4",
                "Outputs.BedrockChatChatStorageSetupChatStorageConversationTableB97E9ADARef"
              ]
            },
            "OPENSEARCH_INDEX_ID": {
              "Ref": "ExistingOpenSearchIndexId"
            },
            "SAGEMAKER_EMBEDDING_ENDPOINT":{
              "Ref":"ExistingSagemakerEmbeddingENDPOINT"
            },
            "OPENSEARCH_HOST": {
              "Ref": "ExistingOpenSearchHost"
            },
            "DEFAULT_OPENSEARCH_NUMBER_OF_DOCS": {
              "Ref": "DefaultOpenSearchNumberOfDocs"
            },
            "OPENSEARCH_SECRET_NAME_ENV_VAR": {
              "Ref": "OpenSearchSecret"
            },
            "KENDRA_INDEX_ID": {
              "Fn::If": [
                "DeployKendraIndexCondition",
                {
                  "Fn::GetAtt": [
                    "KnowledgeBaseSetupKendraKnowledgeBaseNestedStackKendraKnowledgeBaseNestedStackResource1A6F8AB9",
                    "Outputs.BedrockChatKnowledgeBaseSetupKendraKnowledgeBase4B1DFC9FId"
                  ]
                },
                {
                  "Ref": "ExistingKendraIndexId"
                }
              ]
            },
            "SSM_LLM_CONFIG_KEY": {
              "Ref": "ChatConfigSSMParameterName"
            },
            "USE_CASE_UUID": {
              "Ref": "UseCaseUUID"
            },
            "WEBSOCKET_CALLBACK_URL": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "WebsocketRequestProcessorWebSocketEndpointChatAPIBD50D997"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/prod"
                ]
              ]
            },
            "AWS_SDK_USER_AGENT": "{ \"user_agent_extra\": \"AwsSolution/SO0276/v1.2.1\" }"
          }
        },
        "Handler": "bedrock_handler.lambda_handler",
        "Layers": [
          {
            "Ref": "PythonUserAgentLayer6958F3C0"
          },
          {
            "Ref": "LangchainLayer7FB79A8F"
          },
          {
            "Ref": "Boto3Layer463A0AEA"
          },
          {"Ref":  "opensearchpy"
            
          }
        ],
        "MemorySize": 256,
        "Role": {
          "Fn::GetAtt": [
            "ChatLlmProviderLambdaRoleD54DE5CA",
            "Arn"
          ]
        },
        "Runtime": "python3.11",
        "Timeout": 900
      },
      "DependsOn": [
        "ChatLlmProviderLambdaRoleDefaultPolicy7E57DE61",
        "ChatLlmProviderLambdaRoleD54DE5CA"
      ],
      "Metadata": {
        "aws:asset:path": "asset.b10deb5b6f5f4b40f7cd6f1e758c2111d6aadc58927bdc5d457824e866a298a7",
        "aws:asset:is-bundled": true,
        "aws:asset:property": "Code",
        "AdditionalLLMLibraries": "LangChainLibLayer,Boto3Layer",
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "reason": "The lambda uses python 3.10",
              "id": "AwsSolutions-L1"
            }
          ]
        }
      }
    },
    "LambdaQueryKendraIndexPolicy99756D35": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kendra:Query",
                "kendra:Retrieve",
                "kendra:SubmitFeedback"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":kendra:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":index/",
                    {
                      "Fn::If": [
                        "DeployKendraIndexCondition",
                        {
                          "Fn::GetAtt": [
                            "KnowledgeBaseSetupKendraKnowledgeBaseNestedStackKendraKnowledgeBaseNestedStackResource1A6F8AB9",
                            "Outputs.BedrockChatKnowledgeBaseSetupKendraKnowledgeBase4B1DFC9FId"
                          ]
                        },
                        {
                          "Ref": "ExistingKendraIndexId"
                        }
                      ]
                    }
                  ]
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "LambdaQueryKendraIndexPolicy99756D35",
        "Roles": [
          {
            "Ref": "ChatLlmProviderLambdaRoleD54DE5CA"
          }
        ]
      },
      "Condition": "RAGEnabledCondition"
    },
    "WebsocketRequestProcessoronConnectLambdaRole67D9646D": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream"
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":logs:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        ":log-group:/aws/lambda/*"
                      ]
                    ]
                  }
                },
                {
                  "Action": "logs:PutLogEvents",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":logs:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        ":log-group:/aws/lambda/*:log-stream:*"
                      ]
                    ]
                  }
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy"
          }
        ]
      },
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "reason": "Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with tighter permissions.",
              "id": "AwsSolutions-IAM5",
              "applies_to": [
                "Resource::arn:<AWS::Partition>:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/*"
              ]
            },
            {
              "reason": "Lambda function has the required permission to write CloudWatch Log streams. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with tighter permissions.",
              "id": "AwsSolutions-IAM5",
              "applies_to": [
                "Resource::arn:<AWS::Partition>:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/*:log-stream:*"
              ]
            }
          ]
        }
      }
    },
    "WebsocketRequestProcessorOnConnectLambda11F1B67C": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "solutions-${AWS::Region}"
          },
          "S3Key": "generative-ai-application-builder-on-aws/v1.2.3/asset7b605a04cf8695c77d8cfe1514ebf1091855ef14956937a1e767dc19dd758734.zip"
        },
        "Environment": {
          "Variables": {
            "AWS_SDK_USER_AGENT": "{ \"customUserAgent\": [[\"AwsSolution/SO0276/v1.2.3\"]] }",
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1"
          }
        },
        "Handler": "connect-handler.handler",
        "Layers": [
          {
            "Ref": "NodeUserAgentLayer02526341"
          },
          {
            "Ref": "AwsNodeSdkLayer42C7A59C"
          }
        ],
        "Role": {
          "Fn::GetAtt": [
            "WebsocketRequestProcessoronConnectLambdaRole67D9646D",
            "Arn"
          ]
        },
        "Runtime": "nodejs18.x",
        "Timeout": 900
      },
      "DependsOn": [
        "WebsocketRequestProcessoronConnectLambdaRole67D9646D"
      ],
      "Metadata": {
        "aws:asset:path": "asset.7b605a04cf8695c77d8cfe1514ebf1091855ef14956937a1e767dc19dd758734",
        "aws:asset:is-bundled": true,
        "aws:asset:property": "Code"
      }
    },
    "WebsocketRequestProcessoronDisconnectLambdaRole2BD035A9": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream"
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":logs:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        ":log-group:/aws/lambda/*"
                      ]
                    ]
                  }
                },
                {
                  "Action": "logs:PutLogEvents",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":logs:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        ":log-group:/aws/lambda/*:log-stream:*"
                      ]
                    ]
                  }
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy"
          }
        ]
      },
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "reason": "Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with tighter permissions.",
              "id": "AwsSolutions-IAM5",
              "applies_to": [
                "Resource::arn:<AWS::Partition>:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/*"
              ]
            },
            {
              "reason": "Lambda function has the required permission to write CloudWatch Log streams. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with tighter permissions.",
              "id": "AwsSolutions-IAM5",
              "applies_to": [
                "Resource::arn:<AWS::Partition>:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/*:log-stream:*"
              ]
            }
          ]
        }
      }
    },
    "WebsocketRequestProcessorOnDisconnectLambdaBD5F868D": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "solutions-${AWS::Region}"
          },
          "S3Key": "generative-ai-application-builder-on-aws/v1.2.3/asset7b605a04cf8695c77d8cfe1514ebf1091855ef14956937a1e767dc19dd758734.zip"
        },
        "Environment": {
          "Variables": {
            "AWS_SDK_USER_AGENT": "{ \"customUserAgent\": [[\"AwsSolution/SO0276/v1.2.3\"]] }",
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1"
          }
        },
        "Handler": "disconnect-handler.handler",
        "Layers": [
          {
            "Ref": "NodeUserAgentLayer02526341"
          },
          {
            "Ref": "AwsNodeSdkLayer42C7A59C"
          }
        ],
        "Role": {
          "Fn::GetAtt": [
            "WebsocketRequestProcessoronDisconnectLambdaRole2BD035A9",
            "Arn"
          ]
        },
        "Runtime": "nodejs18.x",
        "Timeout": 900
      },
      "DependsOn": [
        "WebsocketRequestProcessoronDisconnectLambdaRole2BD035A9"
      ],
      "Metadata": {
        "aws:asset:path": "asset.7b605a04cf8695c77d8cfe1514ebf1091855ef14956937a1e767dc19dd758734",
        "aws:asset:is-bundled": true,
        "aws:asset:property": "Code"
      }
    },
    "WebsocketRequestProcessorUseCaseCognitoSetupNewUserPoolsmsRole613465EB": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Condition": {
                "StringEquals": {
                  "sts:ExternalId": "BedrockChatWebsocketRequestProcessorUseCaseCognitoSetupNewUserPool95DE78C2"
                }
              },
              "Effect": "Allow",
              "Principal": {
                "Service": "cognito-idp.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "sns:Publish",
                  "Effect": "Allow",
                  "Resource": "*"
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "sns-publish"
          }
        ]
      },
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "reason": "This user pool is used for the use case",
              "id": "AwsSolutions-IAM5",
              "applies_to": [
                "Resource::*"
              ]
            }
          ]
        }
      }
    },
    "WebsocketRequestProcessorUseCaseCognitoSetupNewUserPool942F8271": {
      "Type": "AWS::Cognito::UserPool",
      "Properties": {
        "AccountRecoverySetting": {
          "RecoveryMechanisms": [
            {
              "Name": "verified_phone_number",
              "Priority": 1
            },
            {
              "Name": "verified_email",
              "Priority": 2
            }
          ]
        },
        "AdminCreateUserConfig": {
          "AllowAdminCreateUserOnly": false,
          "InviteMessageTemplate": {
            "EmailMessage": "You have been invited to join Generative AI Application Builder on AWS app. Your temporary credentials are:</p>                         <p>                         Username: <strong>{username}</strong><br />                         Password: <strong>{####}</strong>                         </p>                         <p>                        Please use this temporary password to sign in and change your password.                         Wait until the deployment has completed before accessing the website or api.                          </p> ",
            "EmailSubject": "Invitation to join Generative AI Application Builder on AWS app!"
          }
        },
        "AliasAttributes": [
          "email"
        ],
        "AutoVerifiedAttributes": [
          "email"
        ],
        "EmailVerificationMessage": "Thank you for creating your profile on Generative AI Application Builder on AWS. Your verification code is {####}",
        "EmailVerificationSubject": "Verify your email to continue using Generative AI Application Builder on AWS",
        "EnabledMfas": [
          "SMS_MFA"
        ],
        "MfaConfiguration": "OPTIONAL",
        "Policies": {
          "PasswordPolicy": {
            "MinimumLength": 12,
            "RequireLowercase": true,
            "RequireNumbers": true,
            "RequireSymbols": true,
            "RequireUppercase": true,
            "TemporaryPasswordValidityDays": 3
          }
        },
        "SmsConfiguration": {
          "ExternalId": "BedrockChatWebsocketRequestProcessorUseCaseCognitoSetupNewUserPool95DE78C2",
          "SnsCallerArn": {
            "Fn::GetAtt": [
              "WebsocketRequestProcessorUseCaseCognitoSetupNewUserPoolsmsRole613465EB",
              "Arn"
            ]
          }
        },
        "SmsVerificationMessage": "Thank you for creating your profile on Generative AI Application Builder on AWS! Your verification code is {####}",
        "UserPoolAddOns": {
          "AdvancedSecurityMode": "ENFORCED"
        },
        "UserPoolName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-UserPool"
            ]
          ]
        },
        "VerificationMessageTemplate": {
          "DefaultEmailOption": "CONFIRM_WITH_CODE",
          "EmailMessage": "Thank you for creating your profile on Generative AI Application Builder on AWS. Your verification code is {####}",
          "EmailSubject": "Verify your email to continue using Generative AI Application Builder on AWS",
          "SmsMessage": "Thank you for creating your profile on Generative AI Application Builder on AWS! Your verification code is {####}"
        }
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "reason": "To enable MFA and what should be used as MFA varies on business case, hence disabling it for customers to take a decision",
              "id": "AwsSolutions-COG2"
            }
          ]
        }
      },
      "Condition": "WebsocketRequestProcessorUseCaseCognitoSetupCreateUserPoolCondition0A9C42F0"
    },
    "WebsocketRequestProcessorUseCaseCognitoSetupCognitoGroupPolicyStoreBFD927C3": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "group",
            "AttributeType": "S"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "KeySchema": [
          {
            "AttributeName": "group",
            "KeyType": "HASH"
          }
        ],
        "SSESpecification": {
          "SSEEnabled": true
        }
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "reason": "Enabling point-in-time recovery is recommended in the implementation guide, but is not enforced",
              "id": "AwsSolutions-DDB3"
            }
          ]
        }
      },
      "Condition": "WebsocketRequestProcessorUseCaseCognitoSetupCreateUserPoolCondition0A9C42F0"
    },
    "WebsocketRequestProcessorUseCaseCognitoSetupAppClientF1D50F74": {
      "Type": "AWS::Cognito::UserPoolClient",
      "Properties": {
        "AccessTokenValidity": 5,
        "ExplicitAuthFlows": [
          "ALLOW_ADMIN_USER_PASSWORD_AUTH",
          "ALLOW_USER_PASSWORD_AUTH",
          "ALLOW_REFRESH_TOKEN_AUTH",
          "ALLOW_CUSTOM_AUTH",
          "ALLOW_USER_SRP_AUTH"
        ],
        "IdTokenValidity": 5,
        "TokenValidityUnits": {
          "AccessToken": "minutes",
          "IdToken": "minutes"
        },
        "UserPoolId": {
          "Fn::If": [
            "WebsocketRequestProcessorUseCaseCognitoSetupCreateUserPoolCondition0A9C42F0",
            {
              "Ref": "WebsocketRequestProcessorUseCaseCognitoSetupNewUserPool942F8271"
            },
            {
              "Ref": "ExistingCognitoUserPoolId"
            }
          ]
        }
      }
    },
    "WebsocketRequestProcessorUseCaseCognitoSetupDefaultUserF585377B": {
      "Type": "AWS::Cognito::UserPoolUser",
      "Properties": {
        "DesiredDeliveryMediums": [
          "EMAIL"
        ],
        "ForceAliasCreation": false,
        "UserAttributes": [
          {
            "Name": "email",
            "Value": {
              "Ref": "DefaultUserEmail"
            }
          }
        ],
        "UserPoolId": {
          "Fn::If": [
            "WebsocketRequestProcessorUseCaseCognitoSetupCreateUserPoolCondition0A9C42F0",
            {
              "Ref": "WebsocketRequestProcessorUseCaseCognitoSetupNewUserPool942F8271"
            },
            {
              "Ref": "ExistingCognitoUserPoolId"
            }
          ]
        },
        "Username": {
          "Fn::Join": [
            "",
            [
              {
                "Fn::Select": [
                  0,
                  {
                    "Fn::Split": [
                      "@",
                      {
                        "Ref": "DefaultUserEmail"
                      }
                    ]
                  }
                ]
              },
              "-",
              {
                "Ref": "UseCaseUUID"
              }
            ]
          ]
        }
      },
      "Condition": "WebsocketRequestProcessorUseCaseCognitoSetupCognitoUserCondition3A29510D"
    },
    "WebsocketRequestProcessorUseCaseCognitoSetupUserGroup1E96555B": {
      "Type": "AWS::Cognito::UserPoolGroup",
      "Properties": {
        "GroupName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-Users"
            ]
          ]
        },
        "Precedence": 1,
        "UserPoolId": {
          "Fn::If": [
            "WebsocketRequestProcessorUseCaseCognitoSetupCreateUserPoolCondition0A9C42F0",
            {
              "Ref": "WebsocketRequestProcessorUseCaseCognitoSetupNewUserPool942F8271"
            },
            {
              "Ref": "ExistingCognitoUserPoolId"
            }
          ]
        }
      }
    },
    "WebsocketRequestProcessorUseCaseCognitoSetupUseCaseUserToGroupAttachmentDB67D0A1": {
      "Type": "AWS::Cognito::UserPoolUserToGroupAttachment",
      "Properties": {
        "GroupName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-Users"
            ]
          ]
        },
        "UserPoolId": {
          "Fn::If": [
            "WebsocketRequestProcessorUseCaseCognitoSetupCreateUserPoolCondition0A9C42F0",
            {
              "Ref": "WebsocketRequestProcessorUseCaseCognitoSetupNewUserPool942F8271"
            },
            {
              "Ref": "ExistingCognitoUserPoolId"
            }
          ]
        },
        "Username": {
          "Fn::Join": [
            "",
            [
              {
                "Fn::Select": [
                  0,
                  {
                    "Fn::Split": [
                      "@",
                      {
                        "Ref": "DefaultUserEmail"
                      }
                    ]
                  }
                ]
              },
              "-",
              {
                "Ref": "UseCaseUUID"
              }
            ]
          ]
        }
      },
      "DependsOn": [
        "WebsocketRequestProcessorUseCaseCognitoSetupDefaultUserF585377B",
        "WebsocketRequestProcessorUseCaseCognitoSetupUserGroup1E96555B"
      ],
      "Condition": "WebsocketRequestProcessorUseCaseCognitoSetupCognitoUserCondition3A29510D"
    },
    "WebsocketRequestProcessorWebSocketAuthorizerRole81713A56": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream"
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":logs:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        ":log-group:/aws/lambda/*"
                      ]
                    ]
                  }
                },
                {
                  "Action": "logs:PutLogEvents",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":logs:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        ":log-group:/aws/lambda/*:log-stream:*"
                      ]
                    ]
                  }
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy"
          }
        ]
      },
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "reason": "Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with tighter permissions.",
              "id": "AwsSolutions-IAM5",
              "applies_to": [
                "Resource::arn:<AWS::Partition>:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/*"
              ]
            },
            {
              "reason": "Lambda function has the required permission to write CloudWatch Log streams. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with tighter permissions.",
              "id": "AwsSolutions-IAM5",
              "applies_to": [
                "Resource::arn:<AWS::Partition>:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/*:log-stream:*"
              ]
            }
          ]
        }
      }
    },
    "WebsocketRequestProcessorWebSocketAuthorizerFCF01131": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "solutions-${AWS::Region}"
          },
          "S3Key": "generative-ai-application-builder-on-aws/v1.2.3/asset142b7683d07739b2301d498ce4f329e1c8e244847c34c6b409707787855cb6ad.zip"
        },
        "Description": "Authorizes websocket connections based on Cognito user pool groups",
        "Environment": {
          "Variables": {
            "USER_POOL_ID": {
              "Fn::If": [
                "WebsocketRequestProcessorUseCaseCognitoSetupCreateUserPoolCondition0A9C42F0",
                {
                  "Ref": "WebsocketRequestProcessorUseCaseCognitoSetupNewUserPool942F8271"
                },
                {
                  "Ref": "ExistingCognitoUserPoolId"
                }
              ]
            },
            "CLIENT_ID": {
              "Ref": "WebsocketRequestProcessorUseCaseCognitoSetupAppClientF1D50F74"
            },
            "COGNITO_POLICY_TABLE_NAME": {
              "Fn::If": [
                "WebsocketRequestProcessorUseCaseCognitoSetupCreateUserPoolCondition0A9C42F0",
                {
                  "Ref": "WebsocketRequestProcessorUseCaseCognitoSetupCognitoGroupPolicyStoreBFD927C3"
                },
                {
                  "Ref": "ExistingCognitoGroupPolicyTableName"
                }
              ]
            },
            "AWS_SDK_USER_AGENT": "{ \"customUserAgent\": [[\"AwsSolution/SO0276/v1.2.3\"]] }",
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1"
          }
        },
        "Handler": "websocket-authorizer.handler",
        "Layers": [
          {
            "Ref": "NodeUserAgentLayer02526341"
          },
          {
            "Ref": "AwsNodeSdkLayer42C7A59C"
          }
        ],
        "Role": {
          "Fn::GetAtt": [
            "WebsocketRequestProcessorWebSocketAuthorizerRole81713A56",
            "Arn"
          ]
        },
        "Runtime": "nodejs18.x",
        "Timeout": 900
      },
      "DependsOn": [
        "WebsocketRequestProcessorWebSocketAuthorizerRole81713A56"
      ],
      "Metadata": {
        "aws:asset:path": "asset.142b7683d07739b2301d498ce4f329e1c8e244847c34c6b409707787855cb6ad",
        "aws:asset:is-bundled": true,
        "aws:asset:property": "Code"
      }
    },
    "WebsocketRequestProcessorLambdaPolicyTablePolicyB27CDE58": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetItem",
                "dynamodb:Query"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":dynamodb:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":table/",
                    {
                      "Fn::If": [
                        "WebsocketRequestProcessorUseCaseCognitoSetupCreateUserPoolCondition0A9C42F0",
                        {
                          "Ref": "WebsocketRequestProcessorUseCaseCognitoSetupCognitoGroupPolicyStoreBFD927C3"
                        },
                        {
                          "Ref": "ExistingCognitoGroupPolicyTableName"
                        }
                      ]
                    }
                  ]
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "WebsocketRequestProcessorLambdaPolicyTablePolicyB27CDE58",
        "Roles": [
          {
            "Ref": "WebsocketRequestProcessorWebSocketAuthorizerRole81713A56"
          }
        ]
      }
    },
    "WebsocketRequestProcessorWebSocketEndpointChatAPIBD50D997": {
      "Type": "AWS::ApiGatewayV2::Api",
      "Properties": {
        "Description": {
          "Fn::Join": [
            "",
            [
              "Websocket API for chat use case ",
              {
                "Ref": "UseCaseUUID"
              }
            ]
          ]
        },
        "Name": {
          "Fn::Join": [
            "",
            [
              "ChatAPI-",
              {
                "Ref": "UseCaseUUID"
              }
            ]
          ]
        },
        "ProtocolType": "WEBSOCKET",
        "RouteSelectionExpression": "$request.body.action"
      },
      "DependsOn": [
        "WebsocketRequestProcessorUseCaseCognitoSetupUserGroup1E96555B"
      ]
    },
    "WebsocketRequestProcessorWebSocketEndpointChatAPIconnectRouteConnectIntegrationPermission0BF777CA": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "WebsocketRequestProcessorOnConnectLambda11F1B67C",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "WebsocketRequestProcessorWebSocketEndpointChatAPIBD50D997"
              },
              "/*/*$connect"
            ]
          ]
        }
      },
      "DependsOn": [
        "WebsocketRequestProcessorUseCaseCognitoSetupUserGroup1E96555B"
      ]
    },
    "WebsocketRequestProcessorWebSocketEndpointChatAPIconnectRouteConnectIntegration5540422A": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketRequestProcessorWebSocketEndpointChatAPIBD50D997"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region"
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "WebsocketRequestProcessorOnConnectLambda11F1B67C",
                  "Arn"
                ]
              },
              "/invocations"
            ]
          ]
        }
      },
      "DependsOn": [
        "WebsocketRequestProcessorUseCaseCognitoSetupUserGroup1E96555B"
      ]
    },
    "WebsocketRequestProcessorWebSocketEndpointChatAPIconnectRoute53B021F4": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketRequestProcessorWebSocketEndpointChatAPIBD50D997"
        },
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "WebsocketRequestProcessorWebSocketEndpointChatAPIAuthorizerDECC3CD7"
        },
        "RouteKey": "$connect",
        "Target": {
          "Fn::Join": [
            "",
            [
              "integrations/",
              {
                "Ref": "WebsocketRequestProcessorWebSocketEndpointChatAPIconnectRouteConnectIntegration5540422A"
              }
            ]
          ]
        }
      },
      "DependsOn": [
        "WebsocketRequestProcessorUseCaseCognitoSetupUserGroup1E96555B"
      ]
    },
    "WebsocketRequestProcessorWebSocketEndpointChatAPIAuthorizerDECC3CD7": {
      "Type": "AWS::ApiGatewayV2::Authorizer",
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketRequestProcessorWebSocketEndpointChatAPIBD50D997"
        },
        "AuthorizerType": "REQUEST",
        "AuthorizerUri": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region"
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "WebsocketRequestProcessorWebSocketAuthorizerFCF01131",
                  "Arn"
                ]
              },
              "/invocations"
            ]
          ]
        },
        "IdentitySource": [
          "route.request.querystring.Authorization"
        ],
        "Name": "Authorizer"
      },
      "DependsOn": [
        "WebsocketRequestProcessorUseCaseCognitoSetupUserGroup1E96555B"
      ]
    },
    "WebsocketRequestProcessorWebSocketEndpointChatAPIBedrockChatWebsocketRequestProcessorWebSocketEndpointChatAPIAuthorizerAD8946A5PermissionB43CAD9B": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "WebsocketRequestProcessorWebSocketAuthorizerFCF01131",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "WebsocketRequestProcessorWebSocketEndpointChatAPIBD50D997"
              },
              "/authorizers/",
              {
                "Ref": "WebsocketRequestProcessorWebSocketEndpointChatAPIAuthorizerDECC3CD7"
              }
            ]
          ]
        }
      },
      "DependsOn": [
        "WebsocketRequestProcessorUseCaseCognitoSetupUserGroup1E96555B"
      ]
    },
    "WebsocketRequestProcessorWebSocketEndpointChatAPIdisconnectRouteDisconnectIntegrationPermissionB45BC610": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "WebsocketRequestProcessorOnDisconnectLambdaBD5F868D",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "WebsocketRequestProcessorWebSocketEndpointChatAPIBD50D997"
              },
              "/*/*$disconnect"
            ]
          ]
        }
      },
      "DependsOn": [
        "WebsocketRequestProcessorUseCaseCognitoSetupUserGroup1E96555B"
      ]
    },
    "WebsocketRequestProcessorWebSocketEndpointChatAPIdisconnectRouteDisconnectIntegration51D47C1B": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketRequestProcessorWebSocketEndpointChatAPIBD50D997"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region"
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "WebsocketRequestProcessorOnDisconnectLambdaBD5F868D",
                  "Arn"
                ]
              },
              "/invocations"
            ]
          ]
        }
      },
      "DependsOn": [
        "WebsocketRequestProcessorUseCaseCognitoSetupUserGroup1E96555B"
      ]
    },
    "WebsocketRequestProcessorWebSocketEndpointChatAPIdisconnectRouteF5D62804": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketRequestProcessorWebSocketEndpointChatAPIBD50D997"
        },
        "AuthorizationType": "NONE",
        "RouteKey": "$disconnect",
        "Target": {
          "Fn::Join": [
            "",
            [
              "integrations/",
              {
                "Ref": "WebsocketRequestProcessorWebSocketEndpointChatAPIdisconnectRouteDisconnectIntegration51D47C1B"
              }
            ]
          ]
        }
      },
      "DependsOn": [
        "WebsocketRequestProcessorUseCaseCognitoSetupUserGroup1E96555B"
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "reason": "Only $connect accepts an authorizer for a websocket api",
              "id": "AwsSolutions-APIG4"
            }
          ]
        }
      }
    },
    "WebsocketRequestProcessorWebSocketEndpointChatAPIdefaultRouteDefaultRouteIntegrationPermissionBA15E982": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "ChatLlmProviderLambda8F111649",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "WebsocketRequestProcessorWebSocketEndpointChatAPIBD50D997"
              },
              "/*/*$default"
            ]
          ]
        }
      },
      "DependsOn": [
        "WebsocketRequestProcessorUseCaseCognitoSetupUserGroup1E96555B"
      ]
    },
    "WebsocketRequestProcessorWebSocketEndpointChatAPIdefaultRouteDefaultRouteIntegration57F46665": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketRequestProcessorWebSocketEndpointChatAPIBD50D997"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region"
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "ChatLlmProviderLambda8F111649",
                  "Arn"
                ]
              },
              "/invocations"
            ]
          ]
        }
      },
      "DependsOn": [
        "WebsocketRequestProcessorUseCaseCognitoSetupUserGroup1E96555B"
      ]
    },
    "WebsocketRequestProcessorWebSocketEndpointChatAPIdefaultRouteDBFCCB48": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketRequestProcessorWebSocketEndpointChatAPIBD50D997"
        },
        "AuthorizationType": "NONE",
        "RouteKey": "$default",
        "Target": {
          "Fn::Join": [
            "",
            [
              "integrations/",
              {
                "Ref": "WebsocketRequestProcessorWebSocketEndpointChatAPIdefaultRouteDefaultRouteIntegration57F46665"
              }
            ]
          ]
        }
      },
      "DependsOn": [
        "WebsocketRequestProcessorUseCaseCognitoSetupUserGroup1E96555B"
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "reason": "Only $connect accepts an authorizer for a websocket api",
              "id": "AwsSolutions-APIG4"
            }
          ]
        }
      }
    },
    "WebsocketRequestProcessorWebSocketEndpointChatAPIsendMessageRouteMessageIntegrationPermissionE8970DDE": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "ChatLlmProviderLambda8F111649",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "WebsocketRequestProcessorWebSocketEndpointChatAPIBD50D997"
              },
              "/*/*sendMessage"
            ]
          ]
        }
      },
      "DependsOn": [
        "WebsocketRequestProcessorUseCaseCognitoSetupUserGroup1E96555B"
      ]
    },
    "WebsocketRequestProcessorWebSocketEndpointChatAPIsendMessageRouteMessageIntegrationEF4482F8": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketRequestProcessorWebSocketEndpointChatAPIBD50D997"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region"
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "ChatLlmProviderLambda8F111649",
                  "Arn"
                ]
              },
              "/invocations"
            ]
          ]
        }
      },
      "DependsOn": [
        "WebsocketRequestProcessorUseCaseCognitoSetupUserGroup1E96555B"
      ]
    },
    "WebsocketRequestProcessorWebSocketEndpointChatAPIsendMessageRoute43E228D6": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketRequestProcessorWebSocketEndpointChatAPIBD50D997"
        },
        "AuthorizationType": "NONE",
        "RouteKey": "sendMessage",
        "Target": {
          "Fn::Join": [
            "",
            [
              "integrations/",
              {
                "Ref": "WebsocketRequestProcessorWebSocketEndpointChatAPIsendMessageRouteMessageIntegrationEF4482F8"
              }
            ]
          ]
        }
      },
      "DependsOn": [
        "WebsocketRequestProcessorUseCaseCognitoSetupUserGroup1E96555B"
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "reason": "Only $connect accepts an authorizer for a websocket api",
              "id": "AwsSolutions-APIG4"
            }
          ]
        }
      }
    },
    "WebsocketRequestProcessorWebSocketEndpointProdStage4DB69B11": {
      "Type": "AWS::ApiGatewayV2::Stage",
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketRequestProcessorWebSocketEndpointChatAPIBD50D997"
        },
        "AutoDeploy": true,
        "DefaultRouteSettings": {
          "DataTraceEnabled": false,
          "DetailedMetricsEnabled": true,
          "LoggingLevel": "ERROR"
        },
        "StageName": "prod"
      },
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "reason": "Access logging is disabled for websocket endpoints but will be logged with authorizer",
              "id": "AwsSolutions-APIG1"
            }
          ]
        }
      }
    },
    "WebsocketRequestProcessorCognitoUseCaseGroupPolicyCBC41F18": {
      "Type": "Custom::CognitoUseCaseGroupPolicy",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "UseCaseSetupInfraSetupCustomResource435712F7",
            "Arn"
          ]
        },
        "Resource": "USE_CASE_POLICY",
        "GROUP_NAME": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-Users"
            ]
          ]
        },
        "API_ARN": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "WebsocketRequestProcessorWebSocketEndpointChatAPIBD50D997"
              },
              "/*/*"
            ]
          ]
        },
        "POLICY_TABLE_NAME": {
          "Fn::If": [
            "WebsocketRequestProcessorUseCaseCognitoSetupCreateUserPoolCondition0A9C42F0",
            {
              "Ref": "WebsocketRequestProcessorUseCaseCognitoSetupCognitoGroupPolicyStoreBFD927C3"
            },
            {
              "Ref": "ExistingCognitoGroupPolicyTableName"
            }
          ]
        }
      },
      "DependsOn": [
        "UseCaseSetupCustomResourceLambdaRoleDefaultPolicy041F2670"
      ],
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete"
    },
    "WebConfig": {
      "Type": "Custom::WriteWebConfig",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "UseCaseSetupInfraSetupCustomResource435712F7",
            "Arn"
          ]
        },
        "Resource": "WEBCONFIG",
        "SSMKey": {
          "Fn::Join": [
            "",
            [
              "/gaab-webconfig",
              {
                "Ref": "ChatConfigSSMParameterName"
              }
            ]
          ]
        },
        "ApiEndpoint": {
          "Fn::GetAtt": [
            "WebsocketRequestProcessorWebSocketEndpointChatAPIBD50D997",
            "ApiEndpoint"
          ]
        },
        "UserPoolId": {
          "Fn::If": [
            "WebsocketRequestProcessorUseCaseCognitoSetupCreateUserPoolCondition0A9C42F0",
            {
              "Ref": "WebsocketRequestProcessorUseCaseCognitoSetupNewUserPool942F8271"
            },
            {
              "Ref": "ExistingCognitoUserPoolId"
            }
          ]
        },
        "UserPoolClientId": {
          "Ref": "WebsocketRequestProcessorUseCaseCognitoSetupAppClientF1D50F74"
        },
        "IsInternalUser": {
          "Fn::If": [
            "IsInternalUserCondition",
            true,
            false
          ]
        },
        "AdditionalConfigurationSSMParameterName": {
          "Ref": "ChatConfigSSMParameterName"
        },
        "SocketURL": {
          "Fn::Join": [
            "",
            [
              {
                "Fn::GetAtt": [
                  "WebsocketRequestProcessorWebSocketEndpointChatAPIBD50D997",
                  "ApiEndpoint"
                ]
              },
              "/prod"
            ]
          ]
        },
        "ModelProviderName": "Bedrock",
        "SupportedModels": [
          "ai21.j2-ultra",
          "ai21.j2-mid",
          "amazon.titan-text-express-v1",
          "amazon.titan-text-lite-v1",
          "anthropic.claude-v1",
          "anthropic.claude-v2",
          "anthropic.claude-v2:1",
          "anthropic.claude-instant-v1",
          "cohere.command-text-v14",
          "cohere.command-light-text-v14",
          "meta.llama2-13b-chat-v1",
          "meta.llama2-70b-chat-v1"
        ],
        "AllowsStreaming": true,
        "ModelFamilyParams": {
          "ai21": {
            "ChatPromptTemplate": "{history}\n\n{input}",
            "RAGPromptTemplate": "References:\n{context}\n\nCarefully read the reference passages above and try to truthfully answer the Human's question. If the answer is not explicitly contained within the references, respond with \"Sorry I don't know\". It is very important that you respond \"Sorry I don't know\" if the answer is not found within the references above. Do not make use of any information outside of the references. Try to be brief and write a response in no more than 5 complete sentences.\n\nCurrent conversation:\n{history}\n\nHuman: {input}\nAI:",
            "DefaultTemperature": 1,
            "MinTemperature": 0,
            "MaxTemperature": 1
          },
          "amazon": {
            "ChatPromptTemplate": "{history}\n\n{input}",
            "RAGPromptTemplate": "Instructions: You are an AI Assistant created to help answer the User's question. You are only to answer the User's question using the provided references. You are not allowed to make things up or use your own knowledge. Only use what is provided between the <references> XML tags.\n\nHere are the only references you can use:\n<references>\n{context}\n</references>\n\nGiven the references provided above, answer the User's question. If the answer is not explicitly in the provided references, respond with \"Sorry, I don't know\". It is very important that you say \"Sorry, I don't know\" if the answer isn't in the references. Take your time, think step by step, and do not make anything up.\n\n{history}\nUser: {input}\nBot:",
            "DefaultTemperature": 0.5,
            "MinTemperature": 0,
            "MaxTemperature": 1
          },
          "anthropic": {
            "ChatPromptTemplate": "\n\nHuman: You are a friendly AI assistant that is helpful, honest, and harmless.\n\nHere is the current conversation:\n{history}\n\n{input}\n\nAssistant:",
            "RAGPromptTemplate": "\n\nHuman: You are a friendly AI assistant. You provide answers only based on the provided reference passages.\n\nHere are reference passages in <references></references> tags:\n<references>\n{context}\n</references>\n\nCarefully read the references above and thoughtfully answer the question below. If the answer can not be extracted from the references, then respond with \"Sorry I don't know\". It is very important that you only use information found within the references to answer. Try to be brief in your response.\n\nHere is the current chat history:\n{history}\n\nQuestion: {input}\n\nAssistant:",
            "DefaultTemperature": 1,
            "MinTemperature": 0,
            "MaxTemperature": 1
          },
          "cohere": {
            "ChatPromptTemplate": "{history}\n\n{input}",
            "RAGPromptTemplate": "References:\n{context}\n\nCarefully read the reference passages above and try to truthfully answer the Human's question. If the answer is not explicitly contained within the references, respond with \"Sorry I don't know\". It is very important that you respond \"Sorry I don't know\" if the answer is not found within the references above. Do not make use of any information outside of the references. Try to be brief and write a response in no more than 5 complete sentences.\n\nCurrent conversation:\n{history}\n\nHuman: {input}\nAI:",
            "DefaultTemperature": 0.75,
            "MinTemperature": 0,
            "MaxTemperature": 1
          },
          "meta": {
            "ChatPromptTemplate": "[INST] {history}\n\n{input} [/INST]",
            "RAGPromptTemplate": "[INST] References:\n{context}\n\nCarefully read the reference passages above and try to truthfully answer the Human's question. If the answer is not explicitly contained within the references, respond with \"Sorry I don't know\". It is very important that you respond \"Sorry I don't know\" if the answer is not found within the references above. Do not make use of any information outside of the references. Try to be brief and write a response in no more than 5 complete sentences.\n\nCurrent conversation:\n{history}\n\nHuman: {input}\nAI: [/INST]",
            "DefaultTemperature": 0.5,
            "MinTemperature": 0,
            "MaxTemperature": 1
          }
        }
      },
      "DependsOn": [
        "UseCaseSetupWriteToSSM4B92778A"
      ],
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete"
    },
    "WebAppS3UINestedStackS3UINestedStackResource19E82599": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "Parameters": {
          "WebConfigKey": {
            "Fn::Join": [
              "",
              [
                "/gaab-webconfig",
                {
                  "Ref": "ChatConfigSSMParameterName"
                }
              ]
            ]
          },
          "CustomResourceLambdaArn": {
            "Fn::GetAtt": [
              "UseCaseSetupInfraSetupCustomResource435712F7",
              "Arn"
            ]
          },
          "CustomResourceRoleArn": {
            "Fn::GetAtt": [
              "UseCaseSetupCustomResourceLambdaRole043CC005",
              "Arn"
            ]
          },
          "AccessLoggingBucketArn": {
            "Fn::GetAtt": [
              "UseCaseSetupAccessLog473E9BB9",
              "Arn"
            ]
          },
          "UseCaseUUID": {
            "Ref": "UseCaseUUID"
          },
          "referencetoBedrockChatRegistrySetup5B63CA30Id": {
            "Fn::GetAtt": [
              "RegistrySetupCC2515F0",
              "Id"
            ]
          }
        },
        "TemplateURL": {
          "Fn::Join": [
            "",
            [
              "https://solutions-reference.s3.",
              {
                "Ref": "AWS::URLSuffix"
              },
              "/",
              "generative-ai-application-builder-on-aws/v1.2.3/BedrockChatWebAppS3UI97A266DE.nested.template"
            ]
          ]
        }
      },
      "DependsOn": [
        "RegistrySetupCC2515F0",
        "UseCaseSetupAccessLogPolicyFE09248E",
        "WebConfig"
      ],
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:asset:path": "BedrockChatWebAppS3UI97A266DE.nested.template.json",
        "aws:asset:property": "TemplateURL"
      },
      "Condition": "DeployWebApp"
    },
    "RegistrySetupCC2515F0": {
      "Type": "AWS::ServiceCatalogAppRegistry::Application",
      "Properties": {
        "Description": "Service Catalog application to track and manage all your resources for the solution generative-ai-application-builder-on-aws",
        "Name": {
          "Fn::Join": [
            "",
            [
              "App-GAAB-",
              {
                "Ref": "UseCaseUUID"
              },
              "-",
              {
                "Ref": "AWS::StackName"
              }
            ]
          ]
        },
        "Tags": {
          "Solutions:ApplicationType": "AWS-Solutions",
          "Solutions:SolutionID": "SO0276",
          "Solutions:SolutionName": "generative-ai-application-builder-on-aws",
          "Solutions:SolutionVersion": "v1.2.3"
        }
      }
    },
    "AppRegistryAssociation": {
      "Type": "AWS::ServiceCatalogAppRegistry::ResourceAssociation",
      "Properties": {
        "Application": {
          "Fn::GetAtt": [
            "RegistrySetupCC2515F0",
            "Id"
          ]
        },
        "Resource": {
          "Ref": "AWS::StackId"
        },
        "ResourceType": "CFN_STACK"
      }
    },
    "AppAttributesC4C8180E": {
      "Type": "AWS::ServiceCatalogAppRegistry::AttributeGroup",
      "Properties": {
        "Attributes": {
          "applicationType": "AWS-Solutions",
          "version": "v1.2.3",
          "solutionID": "SO0276",
          "solutionName": "generative-ai-application-builder-on-aws"
        },
        "Description": "Attributes for Solutions Metadata",
        "Name": {
          "Fn::Join": [
            "",
            [
              "AttrGrp-",
              {
                "Ref": "AWS::StackName"
              }
            ]
          ]
        }
      }
    },
    "AppAttributesApplicationAttributeGroupAssociation9a59288b3838FF4AC0A2": {
      "Type": "AWS::ServiceCatalogAppRegistry::AttributeGroupAssociation",
      "Properties": {
        "Application": {
          "Fn::GetAtt": [
            "RegistrySetupCC2515F0",
            "Id"
          ]
        },
        "AttributeGroup": {
          "Fn::GetAtt": [
            "AppAttributesC4C8180E",
            "Id"
          ]
        }
      }
    },
    "CustomMetricsPolicyFE11102D": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "cloudwatch:PutMetricData",
              "Condition": {
                "StringEquals": {
                  "cloudwatch:namespace": [
                    "AWS/ApiGateway",
                    "AWS/Kendra",
                    "AWS/Cognito",
                    "Langchain/LLM"
                  ]
                }
              },
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "CustomMetricsPolicyFE11102D",
        "Roles": [
          {
            "Ref": "UseCaseSetupCustomResourceLambdaRole043CC005"
          },
          {
            "Ref": "UseCaseSetupScheduledMetricsLambdaRole094F4C6B"
          },
          {
            "Ref": "ChatLlmProviderLambdaRoleD54DE5CA"
          },
          {
            "Ref": "WebsocketRequestProcessoronConnectLambdaRole67D9646D"
          },
          {
            "Ref": "WebsocketRequestProcessoronDisconnectLambdaRole2BD035A9"
          },
          {
            "Ref": "WebsocketRequestProcessorWebSocketAuthorizerRole81713A56"
          }
        ]
      },
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "reason": "This policy allows put metric data to CloudWatch. The policy is restricted using policy conditions.",
              "id": "AwsSolutions-IAM5",
              "applies_to": [
                "Resource::*"
              ]
            }
          ]
        }
      }
    },
    "PythonUserAgentLayer6958F3C0": {
      "Type": "AWS::Lambda::LayerVersion",
      "Properties": {
        "CompatibleRuntimes": [
          "python3.8",
          "python3.9",
          "python3.10",
          "python3.11"
        ],
        "Content": {
          "S3Bucket": {
            "Fn::Sub": "solutions-${AWS::Region}"
          },
          "S3Key": "generative-ai-application-builder-on-aws/v1.2.3/asset5d708c721ce247c67dab5b2be265b51985e9ea9f7ea892ab30e3d16565687040.zip"
        },
        "Description": "This layer configures AWS Python SDK initialization to send user-agent information"
      },
      "Metadata": {
        "aws:asset:path": "asset.5d708c721ce247c67dab5b2be265b51985e9ea9f7ea892ab30e3d16565687040",
        "aws:asset:is-bundled": true,
        "aws:asset:property": "Content"
      }
    },
    "Boto3Layer463A0AEA": {
      "Type": "AWS::Lambda::LayerVersion",
      "Properties": {
        "CompatibleRuntimes": [
          "python3.8",
          "python3.9",
          "python3.10",
          "python3.11"
        ],
        "Content": {
          "S3Bucket": {
            "Fn::Sub": "solutions-${AWS::Region}"
          },
          "S3Key": "generative-ai-application-builder-on-aws/v1.2.3/asset8a86142a62521ca025ce7e5cc3442f5ca67f5de2a3699d42f1bfc6671b3bcfe5.zip"
        },
        "Description": "Boto3 layer to be bundled with python lambda functions"
      },
      "Metadata": {
        "aws:asset:path": "asset.8a86142a62521ca025ce7e5cc3442f5ca67f5de2a3699d42f1bfc6671b3bcfe5",
        "aws:asset:is-bundled": true,
        "aws:asset:property": "Content"
      }
    },
    "LangchainLayer7FB79A8F": {
      "Type": "AWS::Lambda::LayerVersion",
      "Properties": {
        "CompatibleRuntimes": [
          "python3.8",
          "python3.9",
          "python3.10",
          "python3.11"
        ],
        "Content": {
          "S3Bucket": {
            "Fn::Sub": "solutions-${AWS::Region}"
          },
          "S3Key": "generative-ai-application-builder-on-aws/v1.2.3/assetb3ae5fe3fd44c59d4b735f7cd4992d621910c3c3e034273461ac93b5e7a65912.zip"
        },
        "Description": "This layer configures the LangChain python package to be bundled with python lambda functions"
      },
      "Metadata": {
        "aws:asset:path": "asset.b3ae5fe3fd44c59d4b735f7cd4992d621910c3c3e034273461ac93b5e7a65912",
        "aws:asset:is-bundled": true,
        "aws:asset:property": "Content"
      }
    },
    "opensearchpy": {
    "Type": "AWS::Lambda::LayerVersion",
    "Properties": {
      "CompatibleRuntimes": [
        "python3.8",
        "python3.9",
        "python3.10",
        "python3.11"
      ],
      "Content": {
        "S3Bucket": !Ref OpenSearchChatLambdaBucket,
        "S3Key": "ChatLlmProviderLambdaLayerAmazonOpenSearch.zip"
      },
      "Description": "This layer configures the opensearchpy python package to be bundled with python lambda functions"
    }
  },
    "NodeUserAgentLayer02526341": {
      "Type": "AWS::Lambda::LayerVersion",
      "Properties": {
        "CompatibleRuntimes": [
          "nodejs18.x"
        ],
        "Content": {
          "S3Bucket": {
            "Fn::Sub": "solutions-${AWS::Region}"
          },
          "S3Key": "generative-ai-application-builder-on-aws/v1.2.3/assetc2423b78bb577e609880a4674161fe50ef55bee27585406f2b03cae8d0cefc14.zip"
        },
        "Description": "This layer configures AWS Node SDK initialization to send user-agent information"
      },
      "Metadata": {
        "aws:asset:path": "asset.c2423b78bb577e609880a4674161fe50ef55bee27585406f2b03cae8d0cefc14",
        "aws:asset:is-bundled": true,
        "aws:asset:property": "Content"
      }
    },
    "AwsNodeSdkLayer42C7A59C": {
      "Type": "AWS::Lambda::LayerVersion",
      "Properties": {
        "CompatibleRuntimes": [
          "nodejs18.x"
        ],
        "Content": {
          "S3Bucket": {
            "Fn::Sub": "solutions-${AWS::Region}"
          },
          "S3Key": "generative-ai-application-builder-on-aws/v1.2.3/asset91925a8f9b84b09a20770721c0856c4d762c503c5a5031e886228f4edbbac061.zip"
        },
        "Description": "AWS Javascript SDK v3 to be bundled with lambda functions as a layer"
      },
      "Metadata": {
        "aws:asset:path": "asset.91925a8f9b84b09a20770721c0856c4d762c503c5a5031e886228f4edbbac061",
        "aws:asset:is-bundled": true,
        "aws:asset:property": "Content"
      }
    },
    "CDKMetadata": {
      "Type": "AWS::CDK::Metadata",
      "Properties": {
        "Analytics": "v2:deflate64:H4sIAAAAAAAA/4VT227bMAz9lrzL6pL2YX1bLtgwoMOCNNseC1rWHDW2aOiSwBP876Msx3aLAQMMkYeieDmkVzw8PvKwXMDVZqI4Z5XKeXh2IM5s+1vvwUAtnTQRHHwlo/wGTaN0GdUt6kI5hZrR+5dg73nYeHGWLl4OWhJ7rJRoJ/OAE9iAlR2roM4L4OGz16KPSc5zfS9NrayN6AlaaX5KY4erOe6YvX8Ba6WzfB0FU1DzMBUwaAdM7UTZMXmRmh6EW5NRdkxU6IsrOHHiYQf2lCOYIl6PgHyw1MohDz+sNHvEKt7/S99WinLMLVHO8ReDvnnvcMTevHY0lFNNETpWtBpqLGhSR8hTvUnpz8QmNKoEJ6/QXlY8kMe6UdHxq3ayNHAj9YDe9QHW3p3QqD+pItqAkoJQ+osSUoCDCkuau5Glss60Q8SGmJxCSYveCEmko1CjmQo3KqcsY3dvLTP3rmP9xGL2uGG3iGzrrcN6glOyodi0rt+9azzxs8ygak7APyw+DXt9F2WYczK4hF8yf8a4hJGfESRaRjgnbXowMTba/sfbLeucurd0dETCw8OtdIuVj07UBB3OeOFs30v6WbJxE556fMRdb9htOqaxkPzV3l2WHzl9q8WrVSozXjtVS35I8i++9BHWAAQAAA=="
      },
      "Condition": "CDKMetadataAvailable"
    }
  },
  "Outputs": {
    "WebConfigKey": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "/gaab-webconfig",
            {
              "Ref": "ChatConfigSSMParameterName"
            }
          ]
        ]
      }
    },
    "CloudFrontWebUrl": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Fn::GetAtt": [
                "WebAppS3UINestedStackS3UINestedStackResource19E82599",
                "Outputs.BedrockChatWebAppS3UIWebsiteUICloudFrontDistributionA6FEDE16DomainName"
              ]
            }
          ]
        ]
      },
      "Condition": "DeployWebApp"
    },
    "KendraIndexId": {
      "Value": {
        "Fn::If": [
          "DeployKendraIndexCondition",
          {
            "Fn::GetAtt": [
              "KnowledgeBaseSetupKendraKnowledgeBaseNestedStackKendraKnowledgeBaseNestedStackResource1A6F8AB9",
              "Outputs.BedrockChatKnowledgeBaseSetupKendraKnowledgeBase4B1DFC9FId"
            ]
          },
          {
            "Ref": "ExistingKendraIndexId"
          }
        ]
      }
    },
    "CloudwatchDashboardUrl": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "AWS::Region"
            },
            ".console.aws.amazon.com/cloudwatch/home?region=",
            {
              "Ref": "AWS::Region"
            },
            "#dashboards/dashboard/",
            {
              "Ref": "UseCaseSetupOpsCustomDashboard7C4D43EB"
            }
          ]
        ]
      }
    }
  }
}
